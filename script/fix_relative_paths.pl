# This script is used by the GitHub Action that builds the website.
# In order to make canonical URIs resolve, we copy pages like `ValueSet-example.html` to
# `ValueSet/example.html`. This will allow the canonical URIs generated by publisher.jar
# to resolve with GitHub Pages.
#
# The .html files generated by the IG Publisher use relative paths, so this script prefixes
# all the relative paths with `../` on the copied pages so they still work.

use strict;
use warnings;
use File::Find;

# Get the directory name from the first argument
my $directory = shift @ARGV;
die "Usage: $0 <directory>\n" unless defined $directory;

# Find HTML files recursively in the specified directory
find(\&process_html_file, $directory);

sub process_html_file {
    my $filename = $_;
    return unless -f $filename && $filename =~ /\.html?$/i;

    # Read the HTML file content
    open(my $fh, '<', $filename) or die "Cannot open file $filename: $!";
    my @lines = <$fh>;
    close($fh);

    # Modify the relative paths within HTML file content -- needs to support both
    # `<a href="">` and `<a href=''>`.
    foreach my $line (@lines) {
        $line =~ s/(<img[^>]+src\s*=\s*)["'](?!http)(.*?)["']/"$1..\/$2"/ge;
        $line =~ s/(<script[^>]+src\s*=\s*)["'](?!http)(.*?)["']/"$1..\/$2"/ge;
        $line =~ s/(<link[^>]+href\s*=\s*)["'](?!http)(.*?)["']/"$1..\/$2"/ge;
        $line =~ s/(<a[^>]+href\s*=\s*)["'](?!http)(.*?)["']/"$1..\/$2"/ge;
    }

    # Write the modified content back to the HTML file
    open($fh, '>', $filename) or die "Cannot write to file $filename: $!";
    print $fh @lines;
    close($fh);
}
